{"version":3,"sources":["redux/actionTypes.js","redux/reducers/index.js","redux/store.js","components/generic/routes/privateRoute.js","components/generic/routes/publicRoute.js","components/pages/fields/login.fields.js","components/pages/fields/forgot.fields.js","components/pages/fields/reset.fields.js","components/pages/fields/register.fields.js","utils/validate.js","actions/auth/login.js","components/pages/login.js","actions/auth/register.js","components/pages/register.js","actions/auth/passwordReset.js","actions/auth/passwordResetCheck.js","components/pages/reset.js","actions/auth/passwordResetRequest.js","components/pages/forgot.js","actions/auth/logout.js","components/pages/private.js","components/pages/public.js","components/pages/basePage.js","App.js","routes.js","serviceWorker.js","index.js"],"names":["ACTIONS","initialState","test","loginData","loginRequestFail","auth_access","Cookies","get","auth_refresh","passwordResetRequestMessage","passwordResetMessage","passwordResetMessageErrors","passwordResetCheckMessage","registerSuccess","registerDataError","registerRequestFail","createStore","state","action","type","payload","data","access","refresh","detail","errors","status","message","passwordResetCheck","success","applyMiddleware","thunk","PrivateRoute","Component","component","rest","render","props","to","PublicRoute","noAuth","console","log","login_fields","username","value","valid","invalid","validationRules","minLength","isRequired","password","forgot_fields","email","isEmail","reset_fields","new_password1","new_password2","register_fields","first_name","last_name","confirm","validate","rules","isValid","rule","minLengthValidator","maxLengthValidator","requiredValidator","emailValidator","length","maxLength","trim","String","toLowerCase","validateForm","formControl","isValidForm","Object","keys","forEach","key","validateFormField","field","fields","isLoading","loginRequest","dispatch","axios","post","window","API_DOMAIN","then","response","set","path","error","Login","useState","setFormControl","useDispatch","useSelector","s","onChangeHandler","Container","Row","style","marginTop","Form","onSubmit","event","preventDefault","FormGroup","Input","name","placeholder","id","onChange","e","target","Col","RegisterRequest","Register","loading","setLoading","map","k","d","FormText","color","passwordReset","uid","token","Reset","useParams","successMessage","errorMessage","useEffect","index","passwordResetRequest","Forgot","logout","remove","Private","history","useHistory","Button","onClick","push","Public","BasePage","App","exact","Boolean","location","hostname","match","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c8505e90.chunk.js","sourcesContent":["export const ACTIONS = { \n  LOGIN_REQUEST: \"LOGIN_REQUEST\",\n  LOGIN_REQUEST_FAIL: \"LOGIN_REQUEST_FAIL\",\n  LOGOUT: \"LOGOUT\",\n\n  PASSWORD_RESET_REQUEST: \"PASSWORD_RESET_REQUEST\",\n  PASSWORD_RESET: \"PASSWORD_RESET\",\n  PASSWORD_RESET_FAIL: \"PASSWORD_RESET_FAIL\",\n  PASSWORD_RESET_CHECK: \"PASSWORD_RESET_CHECK\",\n  REGISTER_ACCOUNT_REQUEST: \"REGISTER_ACCOUNT_REQUEST\",\n  REGISTER_ACCOUNT_REQUEST_FAIL: \"REGISTER_ACCOUNT_REQUEST_FAIL\",\n}","import { ACTIONS } from \"../actionTypes\";\nimport Cookies from \"js-cookie\";\n\nconst initialState = {\n  test: '',\n  loginData: {} = {},\n  loginRequestFail: '',\n  auth_access: Cookies.get('auth_access'),\n  auth_refresh: Cookies.get('auth_refresh'),\n  passwordResetRequestMessage: '',\n  passwordResetMessage: '',\n  passwordResetMessageErrors: {} = {},\n  passwordResetCheckMessage: {} = {},\n  registerSuccess: '',\n  registerDataError: {} = {},\n  registerRequestFail: false,\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.LOGIN_REQUEST: {\n      return {\n        ...state,\n        auth_access: action.payload.data.access,\n        auth_refresh: action.payload.data.refresh,\n      };\n    }\n    case ACTIONS.LOGIN_REQUEST_FAIL: {\n      return {\n        ...state,\n        loginRequestFail: action.payload.detail,\n      };\n    }\n    case ACTIONS.LOGOUT: {\n      return {\n        ...state,\n        auth_access: '',\n        auth_refresh: '',\n      }\n    }\n    case ACTIONS.PASSWORD_RESET_REQUEST: {\n      return {\n        ...state,\n        passwordResetRequestMessage: action.payload.detail\n      }\n    }\n    case ACTIONS.PASSWORD_RESET: {\n      return {\n        ...state,\n        passwordResetMessage: action.payload.detail\n      }\n    }\n    case ACTIONS.PASSWORD_RESET_FAIL: {\n      return {\n        ...state,\n        passwordResetMessageErrors: action.payload.errors\n      }\n    }\n    case ACTIONS.PASSWORD_RESET_CHECK: {\n      return {\n        ...state,\n        passwordResetCheckMessage: {\n          status: action.payload.status,\n          message: action.payload.passwordResetCheck\n        }\n      }\n    }\n    case ACTIONS.REGISTER_ACCOUNT_REQUEST: {\n      return {\n        ...state,\n        auth_access: action.payload.data.access,\n        auth_refresh: action.payload.data.refresh,\n        registerSuccess: action.payload.data.success\n      }\n    }\n    case ACTIONS.REGISTER_ACCOUNT_REQUEST_FAIL: {\n      return {\n        ...state,\n        registerDataError: action.payload.data,\n        registerRequestFail: true\n      }\n    }\n    default:\n      return state;\n  }\n}","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport Cookies from \"js-cookie\";\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n  return (\n    <Route {...rest} render={props => (\n      Cookies.get('auth_access') ?\n        <Component {...props} />\n      : <Redirect to=\"/login\" />\n    )} />\n  )\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport Cookies from \"js-cookie\";\n\nconst PublicRoute = ({component: Component, noAuth, ...rest}) => {\n  console.log('isLogin');\n\n  return (\n    <Route {...rest} render={props => (\n      !noAuth || !Cookies.get('auth_access') ?\n        <Component {...props} />\n      : <Redirect to=\"/private\" />\n    )} />\n  )\n}\n\nexport default PublicRoute;","const login_fields = {\n  username: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 4,\n        isRequired: true\n    },\n  },\n  password: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 1,\n        isRequired: true\n    },\n  },\n}\nexport default login_fields","const forgot_fields = {\n  email: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        isRequired: true,\n        isEmail: true\n    },\n  },\n}\nexport default forgot_fields","const reset_fields = {\n  new_password1: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        isRequired: true,\n        minLength: 6,\n    },\n  },\n  new_password2: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        isRequired: true,\n        minLength: 6,\n    },\n  },\n}\nexport default reset_fields;","const register_fields = {\n  email: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 7,\n        isRequired: true,\n        isEmail: true,\n    },\n  },\n  first_name: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 3,\n        isRequired: true\n    },\n  },\n  last_name: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 3,\n        isRequired: true\n    },\n  },\n  password: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 6,\n        isRequired: true\n    },\n  },\n  confirm: {\n    value: '',\n    valid: false,\n    invalid: false,\n    validationRules: {\n        minLength: 6,\n        isRequired: true\n    },\n  },\n}\nexport default register_fields","const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n\n    switch (rule) {\n      case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]); break;\n\n      case 'maxLength': isValid = isValid && maxLengthValidator(value, rules[rule]); break;\n\n      case 'isRequired': isValid = isValid && requiredValidator(value); break;\n\n      case 'isEmail': isValid = isValid && emailValidator(value); break;\n\n      default: isValid = true;\n    }\n\n  }\n\n  return isValid;\n}\n\nconst minLengthValidator = (value, minLength) => {\n  return value.length >= minLength;\n}\n\nconst maxLengthValidator = (value, maxLength) => {\n  return value.length <= maxLength;\n}\n\nconst requiredValidator = value => {\n  return value.trim() !== ''; \n}\n\nconst emailValidator = value => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(value).toLowerCase());\n}\n\nexport const validateForm = (formControl) => {\n  let isValidForm = true;\n  Object.keys(formControl).forEach(key => {\n    isValidForm = isValidForm && formControl[key].valid;\n  })\n  return isValidForm;\n}\n\nexport const validateFormField = (formControl, field, value) => {\n  let fields = formControl;\n  fields[field].value = value;\n  fields[field].valid = validate(value, fields[field].validationRules);\n  fields[field].invalid = !fields[field].valid\n  return fields;\n}\n\n\nexport default validate;","import React from 'react';\nimport { ACTIONS } from '../../redux/actionTypes';\nimport axios from 'axios';\nimport Cookies from \"js-cookie\";\n\nlet isLoading = false;\n\nconst loginRequest = (data) => {\n  if(!isLoading){\n    isLoading = true;\n    return dispatch =>{\n      return axios.post(`${window.API_DOMAIN}/api/auth/token/`, data).then(\n        (response) => {\n  \n          Cookies.set('auth_access', response.data.access, { path: '/' });\n          Cookies.set('auth_refresh', response.data.refresh, { path: '/' });\n\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.LOGIN_REQUEST,\n            payload: {\n              data: response.data\n            }\n          });\n        },\n        (error) => {\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.LOGIN_REQUEST_FAIL,\n            payload: {\n              detail: error.response.data.detail\n            }\n          })\n        }\n      )\n    }\n  }else{\n    return dispatch => dispatch({type: ''});\n  }\n}\n\nexport default loginRequest;","import React, { useState, useCallback } from 'react';\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Input,\n  Row,\n  Col\n} from 'reactstrap';\nimport { login_fields } from './fields'\nimport { Link, Redirect } from 'react-router-dom';\nimport { validateForm, validateFormField } from '../../utils';\nimport loginRequest from '../../actions/auth/login';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nconst Login = (props) => {\n\n  let [formControl, setFormControl] = useState(login_fields);\n  const dispatch = useDispatch();\n  const {auth_access, loginRequestFail} = useSelector(s => s);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    // check if all fields of form are valid\n    let isValidForm = validateForm(formControl);\n\n    if(isValidForm){\n      let data = {\n        \"username\": formControl.username.value,\n        \"password\": formControl.password.value\n      }\n      dispatch(loginRequest(data));\n    }\n  }\n\n  const onChangeHandler = (value, field) => {\n    setFormControl(validateFormField(formControl, field, value));\n  }\n\n  return (\n    <Container>\n      { auth_access && <Redirect to=\"/private\"/>}\n      { loginRequestFail &&\n        <Row>\n          <p>{loginRequestFail}</p>\n        </Row>\n      }\n      <Row style={{marginTop: 20}}>\n        <Form onSubmit={onSubmit}>\n          <FormGroup>\n            <Input\n              type=\"text\"\n              name=\"username\"\n              placeholder=\"Username\"\n              id=\"username\"\n              onChange={e => onChangeHandler(e.target.value, 'username')}\n              valid={formControl.username.valid}\n              invalid={formControl.username.invalid}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              id=\"password\"\n              onChange={e => onChangeHandler(e.target.value, 'password')}\n              valid={formControl.password.valid}\n              invalid={formControl.password.invalid}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              type=\"submit\"\n              name=\"login_button\"\n              id=\"login_button\"\n              value=\"Login\"\n            />\n          </FormGroup>\n        </Form>\n      </Row>\n      <Row>\n        <Col>\n          <Link to=\"/forgot\">Forgot your password?</Link>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Link to=\"/register\">Register a new user</Link>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Login;","import React from 'react';\nimport { ACTIONS } from '../../redux/actionTypes';\nimport axios from 'axios';\nimport Cookies from \"js-cookie\";\n\nlet isLoading = false;\n\nconst RegisterRequest = (data) => {\n  if(!isLoading){\n    isLoading = true;\n    return dispatch =>{\n      return axios.post(`${window.API_DOMAIN}/api/auth/register/`, data).then(\n        (response) => {\n\n          if(response.data['success']){\n            Cookies.set('auth_access', response.data.access, { path: '/' });\n            Cookies.set('auth_refresh', response.data.refresh, { path: '/' });\n          }\n\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.REGISTER_ACCOUNT_REQUEST,\n            payload: {\n              data: response.data\n            }\n          });\n        },\n        (error) => {\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.REGISTER_ACCOUNT_REQUEST_FAIL,\n            payload: {\n              data: error.response.data\n            }\n          })\n        }\n      )\n    }\n  }else{\n    return dispatch => dispatch({type: ''});\n  }\n}\n\nexport default RegisterRequest;","import React, { useState } from 'react';\nimport {\n  Container,\n  Row,\n  Form,\n  FormGroup,\n  Input,\n  FormText,\n} from 'reactstrap';\nimport { validateForm, validateFormField } from '../../utils';\nimport { Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { register_fields } from './fields';\nimport RegisterRequest from '../../actions/auth/register';\n\n\nconst Register = (props) => {\n  let [formControl, setFormControl] = useState(register_fields);\n  let [loading, setLoading] = useState(false);\n  const { registerSuccess } = useSelector(s => s);\n  const dispatch = useDispatch();\n  const {auth_access, registerRequestFail, registerDataError} = useSelector(s => s);\n\n  const onSubmit = (event) => {\n    setLoading(true);\n    event.preventDefault();\n\n    // check if all fields of form are valid\n    let isValidForm = validateForm(formControl);\n\n    if(isValidForm){\n      let data = {\n        email: formControl.email.value,\n        first_name: formControl.first_name.value,\n        last_name: formControl.last_name.value,\n        password: formControl.password.value,\n        confirm: formControl.confirm.value,\n      }\n      dispatch(RegisterRequest(data));\n    }\n  }\n\n  const onChangeHandler = (value, field) => {\n    setFormControl(validateFormField(formControl, field, value));\n  }\n\n  return (\n      <Container>\n        { auth_access && <Redirect to=\"/private\"/>}\n        <Row>\n          <h1>Register</h1>\n        </Row>\n        { registerSuccess &&\n          <Row>User was registered Sucessfully</Row>\n        }\n        { registerRequestFail && \n          <Row>\n            {Object.keys(registerDataError).map(k => registerDataError[k].length ? registerDataError[k].map(d => <p key={`error_register_${k}`}>{d}</p>) : <p key={`error_register_${k}`}>{registerDataError[k][k]}</p>)}\n          </Row>\n        }\n        { !registerSuccess &&\n          <Row>\n            <Form onSubmit={onSubmit}>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"e-mail\"\n                  id=\"email\"\n                  onChange={e => onChangeHandler(e.target.value, 'email')}\n                  valid={formControl.email.valid}\n                  invalid={formControl.email.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"first_name\"\n                  placeholder=\"First Name\"\n                  id=\"first_name\"\n                  onChange={e => onChangeHandler(e.target.value, 'first_name')}\n                  valid={formControl.first_name.valid}\n                  invalid={formControl.first_name.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"text\"\n                  name=\"last_name\"\n                  placeholder=\"Last Name\"\n                  id=\"last_name\"\n                  onChange={e => onChangeHandler(e.target.value, 'last_name')}\n                  valid={formControl.last_name.valid}\n                  invalid={formControl.last_name.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  id=\"password\"\n                  onChange={e => onChangeHandler(e.target.value, 'password')}\n                  valid={formControl.password.valid}\n                  invalid={formControl.password.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"password\"\n                  name=\"confirm\"\n                  placeholder=\"Confirm Password\"\n                  id=\"confirm\"\n                  onChange={e => onChangeHandler(e.target.value, 'confirm')}\n                  valid={formControl.confirm.valid}\n                  invalid={formControl.confirm.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"submit\"\n                  name=\"register_button\"\n                  id=\"register_button\"\n                  value=\"Submit\"\n                />\n                { loading && <FormText color=\"muted\">...loading</FormText>}\n              </FormGroup>\n            </Form>\n          </Row>\n        }\n      </Container>\n  )\n}\n\nexport default Register;","import { ACTIONS } from '../../redux/actionTypes';\nimport axios from 'axios';\n\nlet isLoading = false;\n\nconst passwordReset = (data, uid, token) => {\n  if(!isLoading){\n    isLoading = true;\n    return dispatch =>{\n      return axios.post(`${window.API_DOMAIN}/api/auth/reset/${uid}/${token}/`, data).then(\n  \n        (response) => {\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.PASSWORD_RESET,\n            payload: {\n              detail: response.data.detail\n            }\n          });\n        },\n  \n        (error) => {\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.PASSWORD_RESET_FAIL,\n            payload: {\n              errors: error.response.data.errors\n            }\n          })\n        }\n      )\n    }\n  }else{\n    return dispatch => dispatch({type: ''});\n  }\n}\n\nexport default passwordReset;","import { ACTIONS } from '../../redux/actionTypes';\nimport axios from 'axios';\n\nconst passwordResetCheck = (uid, token) => {\n  return dispatch =>{\n    return axios.get(`${window.API_DOMAIN}/api/auth/reset/${uid}/${token}/`).then(\n\n      (response) => {\n        return dispatch({\n          type: ACTIONS.PASSWORD_RESET_CHECK,\n          payload: {\n            passwordResetCheck: response.data.detail,\n            status: 'ok'\n          }\n        });\n      },\n\n      (error) => {\n        return dispatch({\n          type: ACTIONS.PASSWORD_RESET_CHECK,\n          payload: {\n            passwordResetCheck: error.response.data.detail,\n            status: 'fail'\n          }\n        });\n      }\n    )\n  }\n}\n\nexport default passwordResetCheck;","import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Row,\n  Form,\n  FormGroup,\n  Input\n} from 'reactstrap';\nimport { validateForm, validateFormField } from '../../utils';\nimport {useParams} from 'react-router-dom';\nimport {reset_fields} from './fields';\nimport { useSelector, useDispatch } from 'react-redux';\nimport passwordReset from '../../actions/auth/passwordReset';\nimport passwordResetCheck from '../../actions/auth/passwordResetCheck'\n\n\nconst Reset = () => {\n\n  let {uid, token} = useParams()\n  let [formControl, setFormControl] = useState(reset_fields);\n\n  const successMessage = useSelector(state => state.passwordResetMessage);\n  const errorMessage = useSelector(state => state.passwordResetMessageErrors);\n  const passwordResetCheckMessage = useSelector(state => state.passwordResetCheckMessage);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(passwordResetCheck(uid, token))\n  }, [])\n  \n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    let isValidForm = validateForm(formControl) && formControl.new_password1.value == formControl.new_password2.value;\n    console.log(isValidForm);\n\n    if(isValidForm){\n      let data = {\n        \"new_password1\": formControl.new_password1.value,\n        \"new_password2\": formControl.new_password2.value\n      }\n\n      dispatch(passwordReset(data, uid, token));\n    }\n  }\n\n  const onChangeHandler = (value, field) => {\n    setFormControl(validateFormField(formControl, field, value));\n  }\n\n  return (\n    <Container>\n      <Row>\n        <h1>Reset Password</h1>\n      </Row>\n\n      {passwordResetCheckMessage.status === 'fail' && (\n        <Row>\n          <p>{passwordResetCheckMessage.message}</p>\n        </Row>\n      )}\n\n      {successMessage && (\n        <Row>\n          <p>{successMessage}</p>\n        </Row>\n      )}\n\n      {passwordResetCheckMessage.status === 'ok' && !successMessage && (\n        <>\n          <Row>\n            <p>{passwordResetCheckMessage.message}</p>\n          </Row>\n\n          {errorMessage.new_password2 && (\n            <Row>\n              <ul>\n                { errorMessage.new_password2.map((d, index) => <li key={`error_reset_${index}`}>{d}</li>)}\n              </ul>\n            </Row>\n          )}\n\n          <Row>\n            <Form onSubmit={onSubmit}>\n              <FormGroup>\n                <Input\n                  type=\"password\"\n                  name=\"new_password1\"\n                  placeholder=\"Password\"\n                  id=\"new_password1\"\n                  onChange={e => onChangeHandler(e.target.value, 'new_password1')}\n                  valid={formControl.new_password1.valid}\n                  valid={formControl.new_password1.invalid}\n                />\n                <Input\n                  type=\"password\"\n                  name=\"new_password2\"\n                  placeholder=\"Password Confirm\"\n                  id=\"new_password2\"\n                  onChange={e => onChangeHandler(e.target.value, 'new_password2')}\n                  valid={formControl.new_password2.valid}\n                  valid={formControl.new_password2.invalid}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Input\n                  type=\"submit\"\n                  name=\"reset_button\"\n                  id=\"reset_button\"\n                  value=\"Reset Password\"\n                />\n              </FormGroup>\n            </Form>\n          </Row>\n        </>\n      )}\n\n    </Container>\n  )\n}\n\nexport default Reset;","import { ACTIONS } from '../../redux/actionTypes';\nimport axios from 'axios';\n\nlet isLoading = false;\n\nconst passwordResetRequest = (data) => {\n  if(!isLoading){\n    isLoading = true;\n    return dispatch =>{\n      return axios.post(`${window.API_DOMAIN}/api/auth/password_reset`, data).then(\n        (response) => {\n          isLoading = false;\n          return dispatch({\n            type: ACTIONS.PASSWORD_RESET_REQUEST,\n            payload: {\n              detail: response.data.detail\n            }\n          });\n        }\n      )\n    }\n  }else{\n    return dispatch => dispatch({type: ''});\n  }\n}\n\nexport default passwordResetRequest;","import React, { useState } from 'react';\nimport { \n  Container,\n  Row,\n  Form,\n  FormGroup,\n  FormText,\n  Input\n} from 'reactstrap';\nimport { validateForm, validateFormField } from '../../utils';\nimport { useSelector, useDispatch } from 'react-redux';\nimport forgot_fields from './fields/forgot.fields';\nimport passwordResetRequest from '../../actions/auth/passwordResetRequest'\n\nconst Forgot = (props) => {\n  let [formControl, setFormControl] = useState(forgot_fields);\n  let [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const successMessage = useSelector(state => state.passwordResetRequestMessage);\n\n  const onSubmit = (event) => {\n    setLoading(true);\n    event.preventDefault();\n\n    // check if all fields of form are valid\n    let isValidForm = validateForm(formControl);\n\n    if(isValidForm){\n      let data = { \"email\": formControl.email.value }\n      dispatch(passwordResetRequest(data));\n    }\n  }\n\n  const onChangeHandler = (value, field) => {\n    setFormControl(validateFormField(formControl, field, value));\n  }\n\n  return (\n    <Container>\n      <Row>\n        <h1>Reset Password</h1>\n      </Row>\n      <Row>\n        {successMessage && \n          <p>{successMessage}</p>\n        }\n        {!successMessage && \n          <Form onSubmit={onSubmit}>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"e-mail\"\n                id=\"email\"\n                onChange={e => onChangeHandler(e.target.value, 'email')}\n                valid={formControl.email.valid}\n                valid={formControl.email.invalid}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"submit\"\n                name=\"reset_button\"\n                id=\"reset_button\"\n                value=\"Submit\"\n              />\n              { loading && <FormText color=\"muted\">...loading</FormText>}\n            </FormGroup>\n          </Form>\n        }\n      </Row>\n    </Container>\n  )\n}\n\nexport default Forgot;","import Cookies from \"js-cookie\";\nimport { ACTIONS } from '../../redux/actionTypes';\n\nconst logout = () => {\n  return dispatch =>{\n    Cookies.remove('auth_access', { path: '/' });\n    Cookies.remove('auth_refresh', { path: '/' });\n    return dispatch({\n      type: ACTIONS.LOGOUT\n    })\n  }\n}\n\nexport default logout;","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport {Container, Button} from 'reactstrap';\nimport logout from '../../actions/auth/logout';\nimport { useDispatch } from 'react-redux';\n\nconst Private = () => {\n  let history = useHistory();\n  let dispatch = useDispatch()\n\n  return (\n    <Container>\n      <h1>Private Page</h1>\n      <p>private page content</p>\n      <Button onClick={() => {\n          dispatch(logout());\n          history.push(\"/login\");\n        }}>Logout</Button>\n    </Container>\n  )\n}\n\nexport default Private;","import React from 'react';\n\nconst Public = (props) => {\n  return (\n    <div>\n      <h1>Public</h1>\n      <p>PUblic content</p>\n    </div>\n  )\n}\n\nexport default Public;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\nconst BasePage = (props) => {\n  return (\n    <Container>\n      <h1>Django React Base Page</h1>\n      <Link to=\"/login\">Login</Link>\n    </Container>\n  )\n}\n\nexport default BasePage;","import React from 'react';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom'\nimport routes from './routes';\nimport './style.scss';\n\nfunction App() {\n  return (\n      <Router>\n        {routes()}\n      </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Switch } from \"react-router-dom\";\nimport PrivateRoute from './components/generic/routes/privateRoute';\nimport PublicRoute from './components/generic/routes/publicRoute';\nimport {\n  Login,\n  Register,\n  Reset,\n  Forgot,\n  Private,\n  Public,\n  BasePage,\n} from './components/pages';\n\nexport default () => {\n  return (\n    <Switch>\n      <PublicRoute exact path=\"/\" component={BasePage} />\n      <PublicRoute path=\"/login\" component={Login} noAuth/>\n      <PublicRoute path=\"/forgot\" component={Forgot} noAuth/>\n      <PublicRoute path=\"/register\" component={Register} noAuth/>\n      <PublicRoute path=\"/auth/reset/:uid/:token/\" component={Reset} noAuth/>\n      <PublicRoute path=\"/public\" component={Public} />\n\n      <PrivateRoute path=\"/private\" component={Private} />\n    </Switch>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}